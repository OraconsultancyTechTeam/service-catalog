<div class="container collapse" id="s3">
  <div class="row mt-2">
    <div class="col-12">
      <form>
        <div class="form-group row">
          <div class="col-md-12">

            <button type="button" class="collapsible active" style="margin: 5px 0;">Step 3: Environment</button>
            <!-- <div class="content" style="display:block;"> -->
            <div class="content" style="text-align: center; display: block;">
              <select id="envSelect" class="selectpicker" data-live-search="true" style="width: 800px;" onchange="envSelected()">
                <!-- <option value="All" style="background-color: #CBE0F7; font-weight: bold;">Select/Deselect All</option> -->
                <option value="" disabled selected style="background-color: white;">Select Environment</option>
                <% step3.forEach(card => { %>
                  <option value="<%=card.id%>"><%=card.name%></option>
                <% }) %>
              </select>
              <!-- <button type="button" onclick="var el = document.getElementsByTagName('select')[0]; $('#step3-text').html(getSelectValues(el));">Add Environment(s)</button> -->
            </div>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  //$('select').selectpicker();

  // $('#envSelect').on('change', function() {
  //   var thisObj = $(this);
  //   var isAllSelected = thisObj.find('option[value="All"]').prop('selected');
  //   var lastAllSelected = $(this).data('all');
  //   var selectedOptions = (thisObj.val()) ? thisObj.val() : [];
  //   var allOptionsLength = thisObj.find('option[value!="All"]').length;

  //   var selectedOptionsLength = selectedOptions.length;

  //   if (isAllSelected == lastAllSelected) {

  //     if ($.inArray("All", selectedOptions) >= 0) {
  //       selectedOptionsLength -= 1;
  //     }

  //     if (allOptionsLength <= selectedOptionsLength) {

  //       thisObj.find('option[value="All"]').prop('selected', true).parent().selectpicker('refresh');
  //       isAllSelected = true;
  //     } else {
  //       thisObj.find('option[value="All"]').prop('selected', false).parent().selectpicker('refresh');
  //       isAllSelected = false;
  //     }

  //   } else {
  //     thisObj.find('option').prop('selected', isAllSelected).parent().selectpicker('refresh');
  //   }

  //   $(this).data('all', isAllSelected);
  // }).trigger('change');

  // function getSelectValues(select) {
  //   var result = [];
  //   var options = select && select.options;
  //   var opt;

  //   for (var i=0, iLen=options.length; i<iLen; i++) {
  //     opt = options[i];

  //     if (opt.selected) {
  //       result.push(opt.text + ', ');
  //     }
  //   }

  //   console.log(result)
  //   console.log(result[-1].slice(0, -1))

  //   return result;
  // }

  function envSelected() {
    var element = $("#envSelect option:selected").text()
    $('#step3-text').html(element)
    //$('#s3').collapse('hide')
    $('#s4').collapse('show')
    document.getElementById("step4").scrollIntoView();
  }

</script>

<style>

  .bootstrap-select {
    width: 80% !important;
  }

</style>